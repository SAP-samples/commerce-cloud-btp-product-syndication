# Product Syndication - Generic Variant Product Export Configuration
# placeholders in file:
# * clientId - OAuth Client to Product Syndication
# * clientSecret - OAuth Client Secret to Product Syndication
# * authUrl - OAuth Server URL for Product Syndication
# * productSyndicationDomain - Product Syndication URL domain. Product Syndication service is accessible in /productsyndication context path
# * adChannelAccountName - Ad Channel
# * locale - 2-letter ISO-639-1 locale symbol which you want to feed: e.g. en
# * countryIsoCode - 2-letter ISO-3166-1 alpha-2, e.g. US

INSERT_UPDATE OAuthClientDetails; clientId[unique = true] ; oAuthUrl    ; scope      ; authorizedGrantTypes; clientSecret
                                ; {{clientId}}            ; {{authUrl}} ; write,read ; client_credentials  ; {{clientSecret}}

INSERT_UPDATE ConsumedOAuthCredential; id[unique = true]                     ; clientId     ; clientSecret    ; oAuthUrl
                                     ; MultiDProductConsumedOAuthCredential  ; {{clientId}} ;{{clientSecret}} ; {{authUrl}}

# Note: name and specUrl or specData attribute values are required in order to create the Endpoint, but does not affect outboundSync functionality.
INSERT_UPDATE Endpoint; id[unique = true]              ; version[unique = true]; name                           ; specUrl
                      ; MultiDProductOutboundEndpoint ; endpoint_version_1.0  ; MultiDProductOutboundEndpoint   ; {{productSyndicationDomain}}/productsyndication/odata2/{{adChannelAccountName}}/{{locale}}/{{countryIsocode}}

INSERT_UPDATE DestinationTarget; id[unique = true]
                               ; MultiDProductOutboundTarget

INSERT_UPDATE ConsumedDestination; id[unique = true]                         ; url                                                       ; endpoint(id, version)                               ; destinationTarget(id)        ; credential(id)
                                 ; MultiDProductOutboundConsumedDestination ; {{productSyndicationDomain}}/productsyndication/odata2/{{adChannelAccountName}}/{{locale}}/{{countryIsocode}} ; MultiDProductOutboundEndpoint:endpoint_version_1.0 ; MultiDProductOutboundTarget ; MultiDProductConsumedOAuthCredential

# Then to create the OutboundChannelConfiguration, OutboundSyncStreamConfigurationContainer, OutboundSyncStreamConfiguration(s), OutboundSyncJob & OutboundSyncCronJob either import:
INSERT_UPDATE OutboundChannelConfiguration; code[unique = true]                 ; integrationObject(code); destination(id)                           ; autoGenerate; batch
                                          ; MultiDProductOutboundChannelConfig  ; MultiDProduct          ; MultiDProductOutboundConsumedDestination  ; true        ; true

# Update the job session attributes
INSERT_UPDATE OutboundSyncJob; code[unique = true]                    ; sessionLanguage(isocode); sessionCurrency(isocode); sessionUser(uid)
                             ; MultiDProductOutboundChannelConfigJob  ; en                      ; USD                     ; admin

INSERT_UPDATE OutboundSyncCronJob; code[unique = true]                        ; sessionLanguage(isocode); sessionCurrency(isocode); sessionUser(uid)
                                 ; MultiDProductOutboundChannelConfigCronJob  ; en                      ; USD                     ; admin

INSERT_UPDATE Trigger; cronJob(code)[unique = true]      ; second; minute; hour; day; month; year; relative; maxAcceptableDelay
                     ; MultiDProductOutboundChannelConfigCronJob; 0;    0; 0    ;  7  ;  -1  ; -1;   true    ; -1

# Update the stream whereClause to only send online products that are approved
UPDATE OutboundSyncStreamConfiguration; streamId[unique = true]                                         ; whereClause
                                      ; MultiDProductOutboundChannelConfig_GenericVariantProduct_Stream ; "
{item.approvalStatus} = ({{ SELECT {e.pk} FROM {ArticleApprovalStatus AS e} WHERE {e.codeLowerCase} = 'approved' }})
AND {item.catalogVersion} IN ({{ SELECT {c.pk} FROM {CatalogVersion AS c} WHERE {c.version} = 'Online' }})
"

# Reset the stream
REMOVE Script[batchmode = true]; code[unique = true]
                               ; MultiDProductResetStream

INSERT_UPDATE Script; code[unique = true]       ; scriptType(code); active; content
                    ; MultiDProductResetStream  ; GROOVY          ; true  ; "
import org.slf4j.LoggerFactory

LoggerFactory.getLogger('MultiDProductResetStream_script').info('Resetting the multi-dimensional product outbound stream')
changeDetectionService.resetStream 'MultiDProductOutboundChannelConfig_GenericVariantProduct_Stream'
"

INSERT_UPDATE ScriptingJob; code[unique = true]          ; scriptURI
                          ; MultiDProductResetStreamJob  ; model://MultiDProductResetStream

INSERT_UPDATE CronJob; code[unique = true]              ; job(code)                    ; sessionUser(uid); sessionLanguage(isocode); sessionCurrency(isocode)
                     ; MultiDProductResetStreamCronJob  ; MultiDProductResetStreamJob  ; admin           ; en                      ; EUR

# Composite job
INSERT_UPDATE CompositeEntry; code[unique = true]                             ; executableCronJob(code)
                            ; MultiDProductResetStreamCronJobEntry            ; MultiDProductResetStreamCronJob
                            ; MultiDProductOutboundChannelConfigCronJobEntry  ; MultiDProductOutboundChannelConfigCronJob

INSERT_UPDATE CompositeCronJob; code[unique = true]               ; job(code)               ; compositeEntries(code)                                                                ; sessionUser(uid); sessionLanguage(isocode); sessionCurrency(isocode)
                                          ; MultiDProductOutboundFullCronJob  ; compositeJobPerformable ; MultiDProductResetStreamCronJobEntry,MultiDProductOutboundChannelConfigCronJobEntry   ; admin           ; en                      ; EUR

INSERT_UPDATE Trigger; cronJob(code)[unique = true]      ; second; minute; hour; day; month; year; relative; maxAcceptableDelay
                     ; MultiDProductOutboundFullCronJob  ; 0     ; 0     ; 0   ; 30 ; -1   ; -1  ; true    ; -1
